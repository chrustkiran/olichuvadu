{"version":3,"sources":["csv_card/CSVCard.js","environment.js","Selectors/selector.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","environment","heading1","heading2","heading3","selected","Selector","state","heading","items","openInNewTab","link","window","open","handleSizeChange","e","setState","target","value","fetchCsv","uri","data","Meta","Card","console","log","Papa","parse","download","credentials","headers","Accept","complete","results","map","item","style","width","cover","src","substring","actions","onClick","type","ghost","title","description","this","bind","span","offset","textAlign","Group","onChange","Button","md","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAKqCA,IAAMC,U,gBCL9BC,EAAc,CACvBC,SAAW,kKACXC,SAAU,kKACVC,SAAU,kKACVC,SAAU,ICMOC,E,2MAGjBC,MAAQ,CACJC,QAAS,WACTC,MAAQ,I,EA6CZC,aAAe,SAAAC,GACbC,OAAOC,KAAKF,EAAM,W,EAIlBG,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CAACP,MAAO,KACtB,EAAKO,SAAS,CAAER,QAASO,EAAEE,OAAOC,QAAS,WACzC,EAAKC,SAASlB,EAAY,EAAKM,MAAMC,c,wEAjDhCY,GACL,IAAIC,EAAO,GACHC,EAASC,IAATD,KACRE,QAAQC,IAAIL,GACdM,IAAKC,MAAMP,EAAK,CACZQ,UAAU,EACVC,YAAa,cACbC,QAAS,CAACC,OAAQ,mBAAoB,eAAgB,oBACvDC,SAAU,SAASC,GAAU,IAAD,OAGvBZ,EAAOY,EAAQZ,KAAKa,KAAI,SAACC,GAAD,MACX,MAAXA,EAAK,GAAY,iCAAM,kBAAC,IAAD,CACvBC,MAAO,CAAEC,MAAO,KAChBC,MACE,yBACEC,IAAM,wBAA0BJ,EAAK,GAAGK,UAAU,MAEtDC,QAAS,CACP,kBAAC,IAAD,CAAQC,QAAW,kBAAK,EAAKhC,aAAayB,EAAK,KAAKQ,KAAK,UAAUC,OAAK,GAAxE,qBAOF,kBAACtB,EAAD,CAEEuB,MAAOV,EAAK,GACZW,YAAaX,EAAK,MAjBH,IAmBX,8BAAkB,iCAG1BY,KAAK/B,SAAS,CAACP,MAAQY,KAE1B2B,KAAKD,U,0CAsBVA,KAAK5B,SAASlB,EAAY8C,KAAKxC,MAAMC,Y,+BAQrC,IAAMC,EAASsC,KAAKxC,MAAME,MACpBD,EAAUuC,KAAKxC,MAAMC,QAC3B,OAKI,6BACK,kBAAC,IAAD,CAAKyC,KAAM,GAAIC,OAAQ,GACnB,yBAAKd,MAAO,CAACe,UAAW,WACjC,kBAAC,IAAMC,MAAP,CAAalC,MAAOV,EAAS6C,SAAUN,KAAKjC,kBAC9C,kBAAC,IAAMwC,OAAP,CAAcpC,MAAM,YAApB,iEACA,kBAAC,IAAMoC,OAAP,CAAcpC,MAAM,YAApB,mIACA,kBAAC,IAAMoC,OAAP,CAAcpC,MAAM,YAApB,2IAKH,kBAAC,IAAD,KACE,6BACP,kBAAC,IAAD,CAAKqC,GAAI,CAACN,KAAM,GAAIC,OAAQ,IACxB,yBAAKd,MAAO,CAACe,UAAW,WACrB1C,Y,GAjG6BV,IAAMC,WCA7BwD,MANf,WACE,OACC,kBAAC,EAAD,OCMiBC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7295dab4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\n\nexport default class CSVCard extends React.Component{\n\n\n   \n\n    render(){\n\n        return(\n            <div>This is {this.props.name}</div>\n        );\n    }\n}","export const environment = {\n    heading1 : \"https://docs.google.com/spreadsheets/u/6/d/14dOSww1YBOk_GOkfeKvzKR2Vt7QOn70_Z3PglwCmx-o/export?format=csv&id=14dOSww1YBOk_GOkfeKvzKR2Vt7QOn70_Z3PglwCmx-o&gid=0\",\n    heading2: \"https://docs.google.com/spreadsheets/u/6/d/114433W__HE6cOHPRuEf7FlHcf5m5sPuAM9kKmDBaP98/export?format=csv&id=114433W__HE6cOHPRuEf7FlHcf5m5sPuAM9kKmDBaP98&gid=0\",\n    heading3: \"https://docs.google.com/spreadsheets/u/6/d/10uy7xRUwcip4OMlr5SjGs-vUo8RLzf-fDH5XZtM3e_8/export?format=csv&id=10uy7xRUwcip4OMlr5SjGs-vUo8RLzf-fDH5XZtM3e_8&gid=0\",\n    selected: \"\"\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Row, Badge, Button, Radio, Col, Card } from 'antd';\nimport 'antd/dist/antd.css';\nimport CSVCard from '../csv_card/CSVCard';\nimport Papa from 'papaparse';\nimport { environment } from '../environment';\n\n\n\nexport default class Selector extends React.Component{\n\n \n    state = {\n        heading: 'heading2',\n        items : [],\n    \n      };\n    \n      fetchCsv(uri) {\n          var data = [];\n          const { Meta } = Card;\n          console.log(uri);\n        Papa.parse(uri, {\n            download: true,\n            credentials: \"same-origin\", //include, same-origin\n            headers: {Accept: 'application/json', 'Content-Type': 'application/json',},\n           complete: function(results) {\n               //console.log(results.data);\n               //console.log(results.data[1][6]);\n                data = results.data.map((item) =>\n                  item[0] != \"id\" ?<div> <Card\n                  style={{ width: 300 }}\n                  cover={\n                    <img \n                      src= {\"//drive.google.com/uc\" + item[6].substring(29)}\n                    ></img> }\n                  actions={[\n                    <Button onClick = {()=> this.openInNewTab(item[6])} type=\"primary\" ghost>\n                   View this photo\n                  </Button>\n\n                \n                  ]}\n                >\n                  <Meta\n\n                    title={item[1]}\n                    description={item[4]}\n                  />\n                </Card> <br></br></div> : <div></div>\n                   \n                  )\n                this.setState({items : data})\n              \n           }.bind(this)\n       });\n    }\n\n\n    openInNewTab = link =>{\n      window.open(link, \"_blank\")\n    }\n\n\n      handleSizeChange = e => {\n        this.setState({items: []});\n        this.setState({ heading: e.target.value }, ()=>{\n          this.fetchCsv(environment[this.state.heading]);\n\n        }\n          ) \n       \n      };\n\n      componentDidMount(){\n        //environment.heading1\n        this.fetchCsv(environment[this.state.heading]);\n      }\n\n\n    render(){\n       \n        \n    \n        const items  = this.state.items;\n        const heading = this.state.heading;\n        return(\n\n\n\n\n            <div>\n                 <Col span={12} offset={6}>\n                     <div style={{textAlign: 'center'}}>\n            <Radio.Group value={heading} onChange={this.handleSizeChange}>\n          <Radio.Button value=\"heading1\">மானுட சந்தை</Radio.Button>\n          <Radio.Button value=\"heading2\">இயற்கையும் செயற்கையும்</Radio.Button>\n          <Radio.Button value=\"heading3\">இன்றைய சூழலில் பெண்ணியம்</Radio.Button>\n        \n        </Radio.Group>\n    \n    \n       <Row>\n         <br></br>\n  <Col md={{span: 12, offset: 6}}>\n      <div style={{textAlign: 'center'}}>\n        {items}\n       </div>\n    </Col>\n  </Row>\n\n    \n        </div>\n        </Col>\n\n          </div>\n        );\n\n\n}\n}","import React from 'react';\nimport './App.css';\nimport Selector from './Selectors/selector';\n\nfunction App() {\n  return (\n   <Selector></Selector>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}